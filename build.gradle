// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files

        /**
         * Updates:
         *  http://developer.android.com/tools/revisions/gradle-plugin.html
         *  http://tools.android.com/tech-docs/new-build-system
         */
        classpath 'com.android.tools.build:gradle:2.3.3'
    }
}

allprojects {
    repositories {
        jcenter()
        mavenLocal()
    }
}

// BUILD_VERSION_INFO must be of the form #.#.#-(YYYYMMDD_#-SNAPSHOT), where the '-' parts are optional
ext.BUILD_VERSION_INFO_REGEX = /^(\d+\.\d+(?:\.\d+)?\.(\d+))(?:-\((\d+(?:_\d+)?(?:-SNAPSHOT)?)\))?$/
ext.BUILD_VERSION_DEFAULT = "0.0.1"
ext.BUILD_VERSION_INFO_DEFAULT = BUILD_VERSION_DEFAULT + "-SNAPSHOT"

/**
 * Uses project properties to determine if the build should be signed. A project with non-null KEY_ALIAS, KEY_PASSWORD, KEYSTORE, and KEYSTORE_PASSWORD properties is considered a signed build.
 *
 * @return true if the build should be signed, otherwise false
 */
def getIsSignedBuild() {
    def hasKeyStore = project.hasProperty("KEYSTORE")
    def hasKeyStorePassword = project.hasProperty("KEYSTORE_PASSWORD")
    def hasKeyAlias = project.hasProperty("KEY_ALIAS")
    def hasKeyPassword = project.hasProperty("KEY_PASSWORD")
    def isSignedBuild = (hasKeyAlias && hasKeyPassword && hasKeyStore && hasKeyStorePassword)
    println "getIsSignedBuild: isSignedBuild=" + isSignedBuild
    return isSignedBuild
}

/**
 * @return the group ID that should be used for the build artifact
 */
def getArtifactGroup() {
    return "com.swooby"
}

/**
 * Returns a string formatted with the build information, including a version code, version name, and a build repository name.
 *
 * @return the value of the BUILD_VERSION_INFO property or '0.0.1' if none is specified
 */
def getBuildVersionInfo() {
    def buildVersionInfo = (project.hasProperty("BUILD_VERSION_INFO") ? project.BUILD_VERSION_INFO : BUILD_VERSION_INFO_DEFAULT)
    println "getBuildVersionInfo: versionInfo=" + (buildVersionInfo ? ('\"' + buildVersionInfo + '\"') : "null")
    return buildVersionInfo
}

/**
 * Used as the version code value in the generated AndroidManifest file. Defaults to 1 if no version code is present in the BUILD_VERSION_INFO property.
 *
 * @return the version code parsed from the BUILD_VERSION_INFO property or 1 if no property is present (or the regex doesn't match)
 */
def getBuildVersionCode() {
    def matcher = getBuildVersionInfo() =~ BUILD_VERSION_INFO_REGEX
    def match = matcher.matches() ? matcher[0] : null
    println "getBuildVersionCode: match=" + match
    def versionCode = match ? Integer.parseInt(match[2]) : 1
    println "getBuildVersionCode: versionCode=" + versionCode
    return versionCode
}

/**
 * Used as the version name value in the generated AndroidManifest file. Defaults to '0.0.1' if no version name is present in the BUILD_VERSION_INFO property.
 *
 * @return the version name parsed from the BUILD_VERSION_INFO property or '0.0.1' if no property is present (or the regex doesn't match)
 */
def getBuildVersionName() {
    def matcher = getBuildVersionInfo() =~ BUILD_VERSION_INFO_REGEX
    def match = matcher.matches() ? matcher[0] : null
    println "getBuildVersion: match=" + match
    def versionName = match ? ((match[3]) ? match[1] + '-' + match[3] : match[1]) : BUILD_VERSION_INFO_DEFAULT
    println "getBuildVersionName: versionName=" + (versionName ? ('\"' + versionName + '\"') : "null")
    return versionName
}

/**
 * Used as the version name in the artifact repository.
 *
 * @return the repository version name or 'unspecified' if there is no valid BUILD_VERSION_INFO property
 */
def getBuildRepoVersionName() {
    def matcher = getBuildVersionInfo() =~ BUILD_VERSION_INFO_REGEX
    def match = matcher.matches() ? matcher[0] : null
    println "getBuildRepoVersionName: match=" + match
    def repoVersionName = match ? match[1] : BUILD_VERSION_DEFAULT
    println "getBuildRepoVersionName: repoVersionName=" + (repoVersionName ? ('\"' + repoVersionName + '\"') : "null")
    return repoVersionName
}

/*
 * Exposes local methods as properties for other scripts to access this scripts' functionality
 */
ext {
    getIsSignedBuild = this.&getIsSignedBuild
    getArtifactGroup = this.&getArtifactGroup
    getBuildVersionInfo = this.&getBuildVersionInfo
    getBuildVersionCode = this.&getBuildVersionCode
    getBuildVersionName = this.&getBuildVersionName
    getBuildRepoVersionName = this.&getBuildRepoVersionName
}
